from .base import OWASP_REGEX, OWASP_METRICS, level_from_score
from django.core.exceptions import ValidationError
from typing import Union
def parse_owasp(vector):
    if not vector or not OWASP_REGEX.match(vector) or not vector.startswith('OWASP:'):
        raise ValidationError(f'Invalid vector: Invalid format')
    # parse CVSS metrics
    values = dict(map(lambda p: tuple(p.split(':')),
                filter(None, vector[6:].split('/'))))
    for k, v in values.items():
        if k not in OWASP_METRICS or v not in OWASP_METRICS[k]:
            raise ValidationError(
                f'Invalid vector: invalid metric value "{k}:{v}"')

    # Validate required metrics
    for m in OWASP_METRICS.keys():
        if m not in values:
            raise ValidationError(
                f'Invalid vector: base metric "{m}" missing')

    return values

def is_owasp(vector):
    return parse_owasp(vector)

def calculate_score(vector) -> Union[dict, None]:
    try:
        values = parse_owasp(vector)
    except ValidationError:
        return None

    def metric(name) -> int:
        m = OWASP_METRICS.get(name, {}).get(values.get(name))
        if m is not None:
            return m
        return OWASP_METRICS.get(name, {}).get('N')

    result = {
        "likelihood": level_from_score(metric('LF')).value,
        "impact": level_from_score(metric('IF')).value,
        "risk": level_from_score(metric('ORS')).value
    }
    return result

def calculate_metrics(vector) -> dict:
    if (metrics := calculate_score(vector)) is not None:
        return metrics
    return {
        "likelihood": "note",
        "impact": "note",
        "risk": "note"
    }

__all__ = [
    'is_owasp', 'calculate_metrics'
]