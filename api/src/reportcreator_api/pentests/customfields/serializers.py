import datetime
from uuid import UUID
from rest_framework import serializers
from drf_spectacular.utils import extend_schema_field
from drf_spectacular.types import OpenApiTypes

from reportcreator_api.pentests.customfields.types import FieldDataType, FieldDefinition
from reportcreator_api.users.models import PentestUser


@extend_schema_field(OpenApiTypes.OBJECT)
class DynamicObjectSerializer(serializers.Serializer):
    def __init__(self, *args, **kwargs):
        self._declared_fields = kwargs.pop('fields', {})
        super().__init__(*args, **kwargs)


class DateField(serializers.DateField):
    def to_internal_value(self, value):
        date = super().to_internal_value(value)
        if isinstance(date, datetime.date):
            return date.isoformat()
        else:
            return date


class UserField(serializers.PrimaryKeyRelatedField):
    queryset = PentestUser.objects.all()

    def to_internal_value(self, data):
        if isinstance(data, (str, UUID)) and (project := self.context.get('project')) and \
            project.imported_members and (imported_user := next(filter(lambda u: data == u.get('id'), project.imported_members), None)):
            return imported_user.get('id')

        user = super().to_internal_value(data)
        return str(user.id) if isinstance(user, PentestUser) else user

    def to_representation(self, value):
        if isinstance(value, (str, UUID)):
            return value
        return super().to_representation(value)


def serializer_from_definition(definition: dict[str, FieldDefinition], **kwargs):
    return DynamicObjectSerializer(
        fields=dict(filter(lambda t: t[1] is not None, map(lambda t: (t[0], serializer_from_field(t[1])), definition.items()))), 
        **kwargs)


def serializer_from_field(definition):
    field_kwargs = {
        'label': definition.label,
        'required': False,
    }
    value_field_kwargs = field_kwargs | {
        'allow_null': True,
        # 'default': getattr(definition, 'default', None),
    }   
    field_type = definition.type
    if field_type in [FieldDataType.STRING, FieldDataType.MARKDOWN, FieldDataType.CVSS, FieldDataType.OWASP, FieldDataType.COMBOBOX]:
        return serializers.CharField(trim_whitespace=False, allow_blank=True, **value_field_kwargs)
    elif field_type == FieldDataType.DATE:
        return DateField(**value_field_kwargs)
    elif field_type == FieldDataType.NUMBER:
        return serializers.FloatField(**value_field_kwargs)
    elif field_type == FieldDataType.BOOLEAN:
        return serializers.BooleanField(**value_field_kwargs)
    elif field_type == FieldDataType.ENUM:
        return serializers.ChoiceField(choices=[c.value for c in definition.choices], **value_field_kwargs)
    elif field_type == FieldDataType.USER:
        return UserField(**value_field_kwargs)
    elif field_type == FieldDataType.OBJECT:
        return serializer_from_definition(definition.properties, **field_kwargs)
    elif field_type == FieldDataType.LIST:
        return serializers.ListField(child=serializer_from_field(definition.items), allow_empty=True, **field_kwargs)
    else:
        raise ValueError(f'Encountered unsupported type in field definition: "{field_type}"')
